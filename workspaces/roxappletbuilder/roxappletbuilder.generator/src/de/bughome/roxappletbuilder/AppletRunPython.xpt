«IMPORT roxappletbuilder»

«EXTENSION de::bughome::roxappletbuilder::Python»

«DEFINE AppletRunPython FOR Applet»
«FILE name + "/AppletRun" GEN -»
#!/usr/bin/env python

import gtk
import logging
import optparse
import sys
import «group».main

def setUpLogging():
    def tagExceptionCallback(eType, eValue, eTraceBack):
        import cgitb

        txt = cgitb.text((eType, eValue, eTraceBack))

        logging.fatal(txt)
    
        sys.exit(1)

	# configure file logger
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s', filename='/tmp/«name».log', filemode='a')
    
    # configure console logger
    consoleHandler = logging.StreamHandler(sys.stdout)
    consoleHandler.setLevel(logging.DEBUG)
    
    consoleFormatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    consoleHandler.setFormatter(consoleFormatter)
    logging.getLogger().addHandler(consoleHandler)

    # replace default exception handler
    sys.excepthook = tagExceptionCallback

if(__name__ == '__main__'):
    setUpLogging()
    
    parser = optparse.OptionParser()
    parser.add_option('-s', '--standalone', dest = 'standAlone', action = 'store_true', help = 'launches the application in standalone mode outside the rox filer panel')
    
    (options, args) = parser.parse_args()
    
    rootWidget = «group».main.create«rootComposite.name.toFirstUpper()»Composite().rootWidget

    if(options.standAlone):
        w = gtk.Window()
        w.add(rootWidget)
        w.show_all()
    
    else:
        xid = int(args[0])
    
        logging.debug('Connecting to XID ' + str(xid))
    
        p = gtk.Plug(xid)
        p.add(rootWidget)
        p.show_all()

    gtk.main()

«ENDFILE»
«ENDDEFINE»
